(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[169],{"5AWH":function(e,n,t){"use strict";t.r(n);var a=t("q1tI"),l=t.n(a),r=t("dEAq"),c=t("H1Ra"),i=t("dMo/"),m=l.a.memo((e=>{e.demos;return l.a.createElement(l.a.Fragment,null,l.a.createElement("div",{className:"markdown"},l.a.createElement("h1",{id:"udemy---rust"},l.a.createElement(r["AnchorLink"],{to:"#udemy---rust","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"Udemy - Rust"),l.a.createElement("h2",{id:"07-user-input"},l.a.createElement(r["AnchorLink"],{to:"#07-user-input","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"07 User Input"),l.a.createElement("p",null,l.a.createElement("strong",null,"main.rs")),l.a.createElement(c["a"],{code:'use std::io;\n\nfn main() {\n    let mut input = String::new();\n    println!("Say something");\n    match io::stdin().read_line(&mut input) {\n        Ok(_) => {\n            println!("You said {}", input)\n        },\n        Err(e) => {\n            println!("Something went wrong {}", e)\n        }\n    }\n}',lang:"rust"}),l.a.createElement("h2",{id:"08-comments"},l.a.createElement(r["AnchorLink"],{to:"#08-comments","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"08 Comments"),l.a.createElement("p",null,"Line comments"),l.a.createElement(c["a"],{code:"// This is a line comment",lang:"rust"}),l.a.createElement("p",null,"Multi line comments are allowed but rarely used"),l.a.createElement(c["a"],{code:"/* This is not\nvery common\n*/",lang:"rust"}),l.a.createElement("p",null,"Doc comments"),l.a.createElement(c["a"],{code:"/// This is mainly used to document functionality",lang:"rust"}),l.a.createElement("p",null,"Heading"),l.a.createElement(c["a"],{code:"//! # Main heading",lang:"rust"}),l.a.createElement("p",null,"Code"),l.a.createElement(c["a"],{code:"//!\t```\n//! fn main() {...}\n//! ```",lang:"rust"}),l.a.createElement("h2",{id:"09-println"},l.a.createElement(r["AnchorLink"],{to:"#09-println","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"09 println!"),l.a.createElement(c["a"],{code:'println!("Hello world!");',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Formatting")),l.a.createElement(c["a"],{code:'println!("My name is {} and I\'m {} years old", "Alex", 29);',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Expressions")),l.a.createElement(c["a"],{code:'println!("a + b = {}", 3 + 6)',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Positional arguments")),l.a.createElement(c["a"],{code:'println!("{0} has a {2} and {0} has a {1}", "Alex", "cat", "dog");',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Named arguments")),l.a.createElement(c["a"],{code:'println!("{name} {surname}", surname="Smith", name="Alex");',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Printing traits")),l.a.createElement(c["a"],{code:'print!("binary: {:b}, Hex: {:x}, Octal: {:o}", 5, 5, 5);',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Debug")),l.a.createElement(c["a"],{code:'println!("Array {:?}", [1, 2, 3]);',lang:"rust"}),l.a.createElement("h2",{id:"10-language-basics---overview"},l.a.createElement(r["AnchorLink"],{to:"#10-language-basics---overview","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"10. Language basics - Overview"),l.a.createElement("ul",null,l.a.createElement("li",null,"Variables"),l.a.createElement("li",null,"Scalar data types"),l.a.createElement("li",null,"Strings"),l.a.createElement("li",null,"Constants"),l.a.createElement("li",null,"Operators"),l.a.createElement("li",null,"Functions")),l.a.createElement("h2",{id:"11-variables"},l.a.createElement(r["AnchorLink"],{to:"#11-variables","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"11. Variables"),l.a.createElement(c["a"],{code:'let name = "Michael"\n\nlet age = 32',lang:"rust"}),l.a.createElement("p",null,"Rust is a strongly typed language"),l.a.createElement("p",null,"Variable type is optional if it can be inferred"),l.a.createElement("p",null,"Type can be specified explicitly"),l.a.createElement(c["a"],{code:"let amount: i64 = 8473926758472",lang:"rust"}),l.a.createElement(c["a"],{code:"let amount = 8473926758472\t// error",lang:"rust"}),l.a.createElement("p",null,"Names can contain letters, numbers, and underscores"),l.a.createElement("p",null,"Must start with a letter or underscore"),l.a.createElement("p",null,"Immutable by default"),l.a.createElement(c["a"],{code:"let length = 34;\nlength = 35;\t\t// error",lang:"rust"}),l.a.createElement("p",null,"Can be declared mutable"),l.a.createElement(c["a"],{code:"let mut length = 34;\nlength = 35;",lang:"rust"}),l.a.createElement("p",null,"Shadowing is allowed"),l.a.createElement(c["a"],{code:'let color = "blue";\nlet color = "red";\nprintln!("Color is {}", color);\t// Color is red',lang:"ts"}),l.a.createElement("p",null,"Declaring multiple variables simultaneously"),l.a.createElement(c["a"],{code:"let (a, b, c) = (2, 3, 4);",lang:"rust"}),l.a.createElement("h2",{id:"12-scalar-data-types"},l.a.createElement(r["AnchorLink"],{to:"#12-scalar-data-types","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"12. Scalar data types"),l.a.createElement("p",null,l.a.createElement("strong",null,"Integer")),l.a.createElement(i["a"],null,l.a.createElement("thead",null,l.a.createElement("tr",null,l.a.createElement("th",{align:"center"},"Size"),l.a.createElement("th",{align:"center"},"Signed"),l.a.createElement("th",{align:"center"},"Unsigned"))),l.a.createElement("tbody",null,l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"8bit"),l.a.createElement("td",{align:"center"},"i8"),l.a.createElement("td",{align:"center"},"u8")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"16bit"),l.a.createElement("td",{align:"center"},"i16"),l.a.createElement("td",{align:"center"},"u16")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"32bit"),l.a.createElement("td",{align:"center"},"i32"),l.a.createElement("td",{align:"center"},"u32")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"64bit"),l.a.createElement("td",{align:"center"},"i64"),l.a.createElement("td",{align:"center"},"u64")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"128bit"),l.a.createElement("td",{align:"center"},"i128"),l.a.createElement("td",{align:"center"},"u128")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"arch"),l.a.createElement("td",{align:"center"},"isize"),l.a.createElement("td",{align:"center"},"usize")))),l.a.createElement("p",null,l.a.createElement("strong",null,"Float")),l.a.createElement(i["a"],null,l.a.createElement("thead",null,l.a.createElement("tr",null,l.a.createElement("th",{align:"center"},"Size"),l.a.createElement("th",{align:"center"},"Float"))),l.a.createElement("tbody",null,l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"32bit"),l.a.createElement("td",{align:"center"},"f32")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"64bit"),l.a.createElement("td",{align:"center"},"f64")))),l.a.createElement("p",null,"Type casting"),l.a.createElement(c["a"],{code:"let pi: f32 = 4;\t// mismatched types error",lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Number separator")),l.a.createElement(c["a"],{code:"let million = 1_000_000;\n\nlet random = 3_836.45_346_546;",lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Boolean")),l.a.createElement(c["a"],{code:"let is_day = true;\n\nlet is_night = false;",lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Character")),l.a.createElement(c["a"],{code:"let char1 = 'A';\nlet smiley_face = '\\u{1F601}';",lang:"rust"}),l.a.createElement("h2",{id:"13-string"},l.a.createElement(r["AnchorLink"],{to:"#13-string","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"13. String"),l.a.createElement("p",null,l.a.createElement("strong",null,"String slices")),l.a.createElement(c["a"],{code:'let cat: &str = "Fluffy";',lang:"rust"}),l.a.createElement(c["a"],{code:'let cat: &\'static str = "Fluffy";',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"String slices are immutable")),l.a.createElement("p",null,l.a.createElement("strong",null,"String objects")),l.a.createElement(c["a"],{code:'let dog = String::new();\n\nlet mut dog = String::from("Max");',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"format!")),l.a.createElement(c["a"],{code:'format!("Hi {} how are you", "Mark");',lang:"rust"}),l.a.createElement("h3",{id:"string-method"},l.a.createElement(r["AnchorLink"],{to:"#string-method","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"String method"),l.a.createElement("p",null,l.a.createElement("strong",null,"len")),l.a.createElement(c["a"],{code:'println!("{}", dog.len());',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"push & push_str")),l.a.createElement(c["a"],{code:'dog.push(\'  \');\t// push one charecter.\n\ndog.push_str("the dog");\t// push whole string.\nprintln("{}", dog);\t// Max the dog',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"replace")),l.a.createElement(c["a"],{code:'let new_dog = dog.replace("the", "is_my");\nprintln!("{}", new_dog);',lang:"rust"}),l.a.createElement("h2",{id:"14-constant"},l.a.createElement(r["AnchorLink"],{to:"#14-constant","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"14. Constant"),l.a.createElement("p",null,l.a.createElement("strong",null,"Values that cannot be changed")),l.a.createElement(c["a"],{code:'const URL: &str = "google.com";',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Uppercase by convention")),l.a.createElement("p",null,l.a.createElement("strong",null,"Data type is mandatory")),l.a.createElement("p",null,l.a.createElement("strong",null,"Shadowing is not premitted")),l.a.createElement("p",null,l.a.createElement("strong",null,"Global or local scope")),l.a.createElement("h2",{id:"15-operator"},l.a.createElement(r["AnchorLink"],{to:"#15-operator","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"15. Operator"),l.a.createElement("h3",{id:"arithmetic-operators"},l.a.createElement(r["AnchorLink"],{to:"#arithmetic-operators","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"Arithmetic operators"),l.a.createElement(i["a"],null,l.a.createElement("thead",null,l.a.createElement("tr",null,l.a.createElement("th",{align:"center"},"Operator"),l.a.createElement("th",{align:"center"},"Name"),l.a.createElement("th",{align:"center"},"Example"))),l.a.createElement("tbody",null,l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"+"),l.a.createElement("td",{align:"center"},"addition"),l.a.createElement("td",{align:"center"},"10 + 3 = 3")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"-"),l.a.createElement("td",{align:"center"},"subtraction"),l.a.createElement("td",{align:"center"},"10 - 3 = 7")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"*"),l.a.createElement("td",{align:"center"},"multiplication"),l.a.createElement("td",{align:"center"},"10 * 3 = 30")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"/"),l.a.createElement("td",{align:"center"},"division"),l.a.createElement("td",{align:"center"},"10 / 3 = 3")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"%"),l.a.createElement("td",{align:"center"},"modules"),l.a.createElement("td",{align:"center"},"10 % 3 = 1")))),l.a.createElement("p",null,l.a.createElement("strong",null,"Note: Increment(++) and decrement(--) are not supported")),l.a.createElement("h3",{id:"relational-operators"},l.a.createElement(r["AnchorLink"],{to:"#relational-operators","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"Relational operators"),l.a.createElement(i["a"],null,l.a.createElement("thead",null,l.a.createElement("tr",null,l.a.createElement("th",{align:"center"},"Operator"),l.a.createElement("th",{align:"center"},"Name"),l.a.createElement("th",{align:"center"},"Example"))),l.a.createElement("tbody",null,l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},">"),l.a.createElement("td",{align:"center"},"Greater than"),l.a.createElement("td",{align:"center"},"10 > 3 = true")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},">="),l.a.createElement("td",{align:"center"},"Greater than or equal to"),l.a.createElement("td",{align:"center"},'"A" >= "a" = false')),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"<"),l.a.createElement("td",{align:"center"},"Lesser than"),l.a.createElement("td",{align:"center"},"10 < 3 = false")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"<="),l.a.createElement("td",{align:"center"},"Lesser than or equal to"),l.a.createElement("td",{align:"center"},"true <= false = false")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"=="),l.a.createElement("td",{align:"center"},"Equal"),l.a.createElement("td",{align:"center"},"3.0 == 3.1 = true")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"!="),l.a.createElement("td",{align:"center"},"Not equal"),l.a.createElement("td",{align:"center"},"'c' != 'C' == true")))),l.a.createElement("h3",{id:"logical-operators"},l.a.createElement(r["AnchorLink"],{to:"#logical-operators","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"Logical operators"),l.a.createElement(i["a"],null,l.a.createElement("thead",null,l.a.createElement("tr",null,l.a.createElement("th",{align:"center"},"Operator"),l.a.createElement("th",{align:"center"},"Name"),l.a.createElement("th",{align:"center"},"Example"))),l.a.createElement("tbody",null,l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"&&"),l.a.createElement("td",{align:"center"},"AND"),l.a.createElement("td",{align:"center"},"true && true = true")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"||"),l.a.createElement("td",{align:"center"},"OR"),l.a.createElement("td",{align:"center"},"true || false = true")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"!"),l.a.createElement("td",{align:"center"},"NOT"),l.a.createElement("td",{align:"center"},"!true = false")))),l.a.createElement("h3",{id:"bitwise-operators"},l.a.createElement(r["AnchorLink"],{to:"#bitwise-operators","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"Bitwise operators"),l.a.createElement(i["a"],null,l.a.createElement("thead",null,l.a.createElement("tr",null,l.a.createElement("th",{align:"center"},"Operator"),l.a.createElement("th",{align:"center"},"Name"),l.a.createElement("th",{align:"center"},"Example"))),l.a.createElement("tbody",null,l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"&"),l.a.createElement("td",{align:"center"},"Bitwise AND"),l.a.createElement("td",{align:"center"},"10 > 3 = true")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"|"),l.a.createElement("td",{align:"center"},"Bitwise OR"),l.a.createElement("td",{align:"center"},'"A" >= "a" = false')),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"^"),l.a.createElement("td",{align:"center"},"Bitwise XOR"),l.a.createElement("td",{align:"center"},"10 < 3 = false")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"!"),l.a.createElement("td",{align:"center"},"NOT"),l.a.createElement("td",{align:"center"},"true <= false = false")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},"<<"),l.a.createElement("td",{align:"center"},"Left shift"),l.a.createElement("td",{align:"center"},"10 << 1 = 20")),l.a.createElement("tr",null,l.a.createElement("td",{align:"center"},">>"),l.a.createElement("td",{align:"center"},"Right shift"),l.a.createElement("td",{align:"center"},"10 >> 1 = 5")))),l.a.createElement("h2",{id:"15-functions"},l.a.createElement(r["AnchorLink"],{to:"#15-functions","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"15. Functions"),l.a.createElement(c["a"],{code:'fn say_hi() {\n  println!("Hello there!");\n}',lang:"rust"}),l.a.createElement(c["a"],{code:"fn main() {\n  say_hi();\n}",lang:"rust"}),l.a.createElement(c["a"],{code:"fn main() {\n  for i in 1..6 {\n    say_hi();\n  }\n}",lang:"rust"}),l.a.createElement("h3",{id:"function-parametes"},l.a.createElement(r["AnchorLink"],{to:"#function-parametes","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"Function parametes"),l.a.createElement("p",null,l.a.createElement("strong",null,"Pass by value")),l.a.createElement(c["a"],{code:'fn main() {\n  let mut name = "John";\n  say_hello(name);\n  println!("{}", name);\n}\n\nfn say_hello(name: &str) {\n  println!("Hello {}", name);\n}',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Pass by reference")),l.a.createElement(c["a"],{code:'fn main() {\n  let mut name = "John";\n  say_hello(&mut name);\n  println("{}", name);\n}\n\nfn say_hello(name: &mut &str) {\n  *name = "Alex";\n  println!("Hello {}", name)\n}',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Return values")),l.a.createElement(c["a"],{code:'fn main() {\n  let mut name = "John";\n  let greeting = say_hello(&mut name);\n  println("{}", greeting);\n}\n\nfn say_hello(name: &mut &str) -> String {\n  let greeting = format!("Hello {}", name);\n  return greeting;\n}',lang:"rust"}),l.a.createElement("h2",{id:"17-modules-overview"},l.a.createElement(r["AnchorLink"],{to:"#17-modules-overview","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"17. Modules Overview"),l.a.createElement("ul",null,l.a.createElement("li",null,"Modules"),l.a.createElement("li",null,"Crates")),l.a.createElement("h2",{id:"18-modules"},l.a.createElement(r["AnchorLink"],{to:"#18-modules","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"18. Modules"),l.a.createElement("p",null,l.a.createElement("strong",null,"Create a module")),l.a.createElement(c["a"],{code:"pub mod mod_name {\n  pub fn do_something () {\n    ...\n  }\n}",lang:"rust"}),l.a.createElement(c["a"],{code:"mod mod_name;\n\nfn main() {\n\tmod_mane::do_something();\n}",lang:"unknown"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Nested modules")),l.a.createElement(c["a"],{code:"pub mod mod_name {\n  pub mod submod {\n    fn fun_submodule() {\n      ...\n    }\n  }\n}",lang:"rust"}),l.a.createElement(c["a"],{code:"mod mod_name;\n\nfn main() {\n\tmod_name::submod::fun_submodule();\n}",lang:"rust"}),l.a.createElement("h2",{id:"19-crates"},l.a.createElement(r["AnchorLink"],{to:"#19-crates","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"19. Crates"),l.a.createElement("p",null,"Multiple modules are grouped into a crate"),l.a.createElement("p",null,"Two types"),l.a.createElement("ul",null,l.a.createElement("li",null,"binary crates"),l.a.createElement("li",null,"library crates")),l.a.createElement("p",null,"Cargo is used to manage crates"),l.a.createElement("p",null,"External crates are imported into the project must be added to the toml file."),l.a.createElement(c["a"],{code:'use crate::archive::arch::arch_file as arc;\nuse rand::Rng;\n\nmod archive;\n\nfn main() {\n    arc("somefile.txt");\n\n    let mut rng = rand::thread_rng();\n    let a: i32 = rng.gen();\n\n    println!("{}", a);\n}',lang:"rust"}),l.a.createElement(c["a"],{code:'// archive.rs\npub mod arch {\n  pub fn arch_file(name: &str) {\n    println!("Archiving file {}", name);\n  }\n}',lang:"rust"}),l.a.createElement("h2",{id:"20-random"},l.a.createElement(r["AnchorLink"],{to:"#20-random","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"20. Random"),l.a.createElement("p",null,l.a.createElement("strong",null,"Generate an integer")),l.a.createElement(c["a"],{code:"use rand::Rng;\nlet mut rng = rand::thread_rng();\nrng.gen();",lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Bounded generation")),l.a.createElement(c["a"],{code:"rng.gen_range(0, 10);",lang:"rust"}),l.a.createElement(c["a"],{code:"// \u751f\u62100~10\u7684\u968f\u673a\u6d6e\u70b9\u6570\nrng.gen_range(0.0, 10.0)",lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"String generation")),l.a.createElement(c["a"],{code:'use rand::{thread_rng, Rng};\nuse rand::distributions::Alphanumeric\n\nfn main() {\n  let rand_string: String = thread_rng()\n  \t.sample_iter(&Alphanumeric)\n  \t.take(30)\n  \t.collect();\n  println!("{}", rand_string);\n}',lang:"rust"}),l.a.createElement("h2",{id:"21-data-types"},l.a.createElement(r["AnchorLink"],{to:"#21-data-types","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"21. Data types"),l.a.createElement("ul",null,l.a.createElement("li",null,"Arrays"),l.a.createElement("li",null,"Vectors"),l.a.createElement("li",null,"Slices"),l.a.createElement("li",null,"Tuples"),l.a.createElement("li",null,"Structures"),l.a.createElement("li",null,"Enums"),l.a.createElement("li",null,"Generics")),l.a.createElement("h2",{id:"22-arrays"},l.a.createElement(r["AnchorLink"],{to:"#22-arrays","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"22. Arrays"),l.a.createElement("p",null,"A collection of values of the same type"),l.a.createElement(c["a"],{code:"let primes = [2, 3, 5, 7, 11];",lang:"rust"}),l.a.createElement(c["a"],{code:"let doubles: [f64; 4] = [2.0, 4.0, 6.0, 8.0];",lang:"rust"}),l.a.createElement("ul",null,l.a.createElement("li",null,"Static - cannot be resized"),l.a.createElement("li",null,"Element values can be modified but not deleted"),l.a.createElement("li",null,"Indexed")),l.a.createElement("p",null,"Create array with default values"),l.a.createElement(c["a"],{code:"let mut numbers = [0;15];",lang:"rust"}),l.a.createElement(c["a"],{code:"const DEFAULT: i32 = 3;\nlet numbers = [DEFAULT;15];",lang:"rust"}),l.a.createElement("p",null,"Updating elements"),l.a.createElement(c["a"],{code:"numbers[3] = 5;",lang:"rust"}),l.a.createElement("p",null,"Using an iterator"),l.a.createElement(c["a"],{code:"for number in numbers.iter() {\n  println!('{}', number + 3);\n}",lang:"rust"}),l.a.createElement("h2",{id:"23-vectors"},l.a.createElement(r["AnchorLink"],{to:"#23-vectors","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"23. Vectors"),l.a.createElement("p",null,"Arrays of variables size"),l.a.createElement(c["a"],{code:"let mut primes: Vec<i32> = Vec::new();",lang:"rust"}),l.a.createElement(c["a"],{code:"let mut primes = vec![2, 3, 5];",lang:"rust"}),l.a.createElement("p",null,"Adding elements"),l.a.createElement(c["a"],{code:"primes.push(7);",lang:"rust"}),l.a.createElement("p",null,"Removing elements"),l.a.createElement(c["a"],{code:"primes.remove(2);",lang:"rust"}),l.a.createElement("p",null,"Create vectors with default values"),l.a.createElement(c["a"],{code:"let mut numbers = vec![2;10];",lang:"rust"}),l.a.createElement(c["a"],{code:"const DEFAULT: i32 = 6;\nlet mut numbers = [DEFAULT;8];",lang:"rust"}),l.a.createElement("h2",{id:"24-slices"},l.a.createElement(r["AnchorLink"],{to:"#24-slices","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"24. Slices"),l.a.createElement("p",null,"A slice is a pointer to a block of memory"),l.a.createElement(c["a"],{code:"let numbers = [1, 2, 3, 4, 5];\nlet slice = &numbers[1..4];",lang:"rust"}),l.a.createElement("ul",null,l.a.createElement("li",null,"Size is determined at runtime"),l.a.createElement("li",null,"Can be used on arrays, vectors and things"),l.a.createElement("li",null,"Indexed")),l.a.createElement("p",null,"Mutable slices allow us to change values"),l.a.createElement("h2",{id:"25-tuples"},l.a.createElement(r["AnchorLink"],{to:"#25-tuples","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"25. Tuples"),l.a.createElement("p",null,"A collection of values of various types"),l.a.createElement(c["a"],{code:'let person = {"John", 27, true};',lang:"rust"}),l.a.createElement(c["a"],{code:'let person: (&str, i32, bool) = ("John", 27\uff0c true);',lang:"rust"}),l.a.createElement("ul",null,l.a.createElement("li",null,"Static - cannot be resized"),l.a.createElement("li",null,"Element values can be updated"),l.a.createElement("li",null,"Indexed"),l.a.createElement("li",null,"Limited to 12 elements")),l.a.createElement("p",null,l.a.createElement("strong",null,"Accessing elements")),l.a.createElement(c["a"],{code:'println!("Name: {}", person.0);',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Updating elements")),l.a.createElement(c["a"],{code:'person.0 = "Jack";',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Destructuring a tuple")),l.a.createElement(c["a"],{code:"let (name, age, employed) = person;",lang:"rust"}),l.a.createElement("p",null,"number of variables must correspond to number of elements"),l.a.createElement("h2",{id:"26-sturctures"},l.a.createElement(r["AnchorLink"],{to:"#26-sturctures","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"26. Sturctures"),l.a.createElement("p",null,"A collections of key-value pairs"),l.a.createElement(c["a"],{code:"struct Employee {\n  name: String,\n  company: String,\n  age: u32\n}",lang:"rust"}),l.a.createElement(c["a"],{code:'let emp1 = Employee {\n  name: String::from("John"),\n  company: String::from("Google"),\n  age: 35\n}',lang:"rust"}),l.a.createElement(c["a"],{code:'println("{}", emp1.name);',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Adding methods to a structure")),l.a.createElement(c["a"],{code:'impl Employee {\n    fn fn_detail(&self) -> String {\n        format!("name: {}, age: {}, company: {}", &self.name, &self.age, &self.company)\n    }\n}',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"A structure can have static methods")),l.a.createElement(c["a"],{code:'impl Employee {\n    fn static_fn_detail() -> String {\n        String::from("Details of a person")\n    }\n}',lang:"rust"}),l.a.createElement("h2",{id:"27-enums"},l.a.createElement(r["AnchorLink"],{to:"#27-enums","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"27. Enums"),l.a.createElement("p",null,"A collection of values"),l.a.createElement(c["a"],{code:"enum Color {\n  Red,\n  Green,\n  Blue\n}",lang:"rust"}),l.a.createElement(c["a"],{code:"let my_color = Color::Red;",lang:"rust"}),l.a.createElement(c["a"],{code:"let my_color = Red;",lang:"rust"}),l.a.createElement("p",null,"We can add data types to enum elements"),l.a.createElement(c["a"],{code:"enum Person {\n  Name(String),\n  Surname(String),\n  Age(u32)\n}",lang:"rust"}),l.a.createElement("h2",{id:"28-generics"},l.a.createElement(r["AnchorLink"],{to:"#28-generics","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"28. Generics"),l.a.createElement("p",null,"Allows us to have variable data types"),l.a.createElement(c["a"],{code:"struct Point<T> {\n  x: T,\n  y: T\n}",lang:"rust"}),l.a.createElement(c["a"],{code:"let p1: Point<i32> = Point {x: 6, y: 8};\nlet p2: Point<f64> = Point {x: 3.25, y: 8.43};",lang:"rust"}),l.a.createElement(c["a"],{code:"struct Point<T, V> {\n  x: T,\n  y: V\n}\n\nlet p3: Point<i32, f64> = Point{x: 5, y: 3.24};",lang:"rust"}),l.a.createElement("h2",{id:"29-control-structures"},l.a.createElement(r["AnchorLink"],{to:"#29-control-structures","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"29. Control structures"),l.a.createElement("ul",null,l.a.createElement("li",null,"If statement"),l.a.createElement("li",null,"Match statement"),l.a.createElement("li",null,"Pattern matching"),l.a.createElement("li",null,"For loop"),l.a.createElement("li",null,"While loop")),l.a.createElement("h2",{id:"30-if-statement"},l.a.createElement(r["AnchorLink"],{to:"#30-if-statement","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"30. If statement"),l.a.createElement("p",null,l.a.createElement("img",{src:"http://wuxiao-tech-doc.oss-cn-hangzhou.aliyuncs.com/2022-06-26-080713.png",alt:"image-20220626160711118"})),l.a.createElement(c["a"],{code:"if logical_expression {\n  functionality for true\n}",lang:"rust"}),l.a.createElement(c["a"],{code:"if logical_expression {\n   functionality for true\n} else {\n   functionality for false\n}",lang:"rust"}),l.a.createElement(c["a"],{code:"if expression1 {\n   functionality for expression1 true\n} else if expression2 {\n   functionality for expression1 false and expression2 true\n} else {\n   functionality for both expressions false\n}",lang:"rust"}),l.a.createElement("p",null,"If statement can return a result"),l.a.createElement(c["a"],{code:"let res = if expr1 {\n   result for true\n} else {\n   result for false\n}",lang:"rust"}),l.a.createElement("h2",{id:"31-match"},l.a.createElement(r["AnchorLink"],{to:"#31-match","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"31 Match"),l.a.createElement("p",null,"Similar to when or switch in other languages"),l.a.createElement(c["a"],{code:"match expression {\n  expr1 => { ... }\n  expr2 => { ... }\n  _ => { ... }\n}",lang:"rust"}),l.a.createElement("ul",null,l.a.createElement("li",null,"Can return a result"),l.a.createElement("li",null,"Ranges are allowed")),l.a.createElement(c["a"],{code:'fn country(code: i32) {\n  let country = match code {\n    44 => "UK",\n    34 => "Spain",\n    1...999 => "unknown",\n    _ => "invalid"\n  }\n  println!("Country is {}", country);\n}',lang:"rust"}),l.a.createElement("h2",{id:"32-pattern-matching"},l.a.createElement(r["AnchorLink"],{to:"#32-pattern-matching","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"32 Pattern matching"),l.a.createElement(c["a"],{code:"match expression {\n  expr1 => { ... }\n  expr2 => { ... }\n  _ => { ... }\n}",lang:"rust"}),l.a.createElement("ul",null,l.a.createElement("li",null,"Multiple values 1 | 2"),l.a.createElement("li",null,"Ranges 1..=5"),l.a.createElement("li",null,"Conditions x if a > b"),l.a.createElement("li",null,"Tuple matching")),l.a.createElement(c["a"],{code:'fn get_oranges(amount: i32) -> &\'static str {\n  return match amount {\n    0 => "no",\n    1 | 2 => "one or two",\n    3..=7 => "a few",\n    _ if (amount % 2 == 0) => "an even amount of",\n    _ => "lots of"\n  }\n}',lang:"rust"}),l.a.createElement("h2",{id:"33-for-loop"},l.a.createElement(r["AnchorLink"],{to:"#33-for-loop","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"33 For Loop"),l.a.createElement("p",null,"Loop through a collection or range, execute code for each element"),l.a.createElement(c["a"],{code:"for element in collection {\n  functionality\n}",lang:"rust"}),l.a.createElement(c["a"],{code:'fn main() {\n\tfor i in 1..11 {\n    println!("{0} * {0} = {1}", i, i * i);\n  }\n}',lang:"rust"}),l.a.createElement("p",null,"Continue will skip a step"),l.a.createElement("p",null,"Break will stop the loop"),l.a.createElement("h2",{id:"34-while-loop"},l.a.createElement(r["AnchorLink"],{to:"#34-while-loop","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"34. While Loop"),l.a.createElement("p",null,"Loop as long as a condition is true"),l.a.createElement(c["a"],{code:"while condition {\n  ...\n}",lang:"rust"}),l.a.createElement("p",null,"Continue skips a step"),l.a.createElement("p",null,"Break stops the loop"),l.a.createElement(c["a"],{code:'fn get_squares(limit: i32) {\n  let mut x = 1;\n  while x * x < limit {\n    println!("{0} * {0} = {1}", x, x * x);\n    x += 1;\n  }\n}',lang:"rust"}),l.a.createElement(c["a"],{code:'fn get_cubes(limit: i32) {\n  let mut x = 1;\n  loop {\n    println!("{0} * {0} * {0} = {1}", x, x * x * x);\n    x += 1\n    if x * x * x > limit {\n      break\n    }\n  }\n}',lang:"rust"}),l.a.createElement("h2",{id:"35-functions-overview"},l.a.createElement(r["AnchorLink"],{to:"#35-functions-overview","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"35 Functions Overview"),l.a.createElement("ul",null,l.a.createElement("li",null,"Functions and scope"),l.a.createElement("li",null,"Closures"),l.a.createElement("li",null,"Higher Order Functions"),l.a.createElement("li",null,"Macros")),l.a.createElement("h2",{id:"36-functions-and-scope"},l.a.createElement(r["AnchorLink"],{to:"#36-functions-and-scope","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"36. Functions and scope"),l.a.createElement("p",null,l.a.createElement("strong",null,"Functions")),l.a.createElement(c["a"],{code:'fn main() {\n  say_hi();\n}\n\nfn say_hi() {\n  println!("Hello there!");\n}',lang:"rust"}),l.a.createElement(c["a"],{code:'fn main() {\n\tlet mut name = "John";\n  say_hi(&mut name);\n  print!("The new name is {}", name);\n}\n\nfn say_hi(name: &mut &str) {\n\t*name = "Alex";\n  println!("Hello {}!", name);\n}',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Scope")),l.a.createElement("p",null,"No memory leaks - no need to manually deallocate variables"),l.a.createElement(c["a"],{code:'{\n  let a = 3;\n}\n\nprintln("a = {}", a)\t// error',lang:"rust"}),l.a.createElement("p",null,"Global variables can be declared but they are unsafe"),l.a.createElement(c["a"],{code:"let a = 3;",lang:"rust"}),l.a.createElement(c["a"],{code:'fn main() {\n  unsafe { println!("{}", a); }\n}',lang:"rust"}),l.a.createElement("h2",{id:"37-closures"},l.a.createElement(r["AnchorLink"],{to:"#37-closures","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"37. Closures"),l.a.createElement("p",null,"A function within a function"),l.a.createElement("p",null,"An anonymous function, lambda expression"),l.a.createElement(c["a"],{code:'|a: i32, b: i32| println("{}", a + b);\n|a: i32, b: i32| -> i32 {a + b};',lang:"rust"}),l.a.createElement("p",null,"A function can assigned to a variable"),l.a.createElement(c["a"],{code:"let sum = |a: i32\uff0c b: i32| -> i32 {a + b};\nsum(2, 3);",lang:"rust"}),l.a.createElement("p",null,"A clujure can be genetic"),l.a.createElement(c["a"],{code:'let gen = |x| { println!("received {}"), x };\ngen(3);',lang:"rust"}),l.a.createElement("h2",{id:"38-hofs"},l.a.createElement(r["AnchorLink"],{to:"#38-hofs","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"38. HOFs"),l.a.createElement("p",null,"Functions that take another function as a parameter"),l.a.createElement(c["a"],{code:"fn apply (f: fn(i32) -> i32, a: i32) {\n}",lang:"rust"}),l.a.createElement(c["a"],{code:"apply(|x| -> x + 1, a);",lang:"rust"}),l.a.createElement("h2",{id:"39-macros"},l.a.createElement(r["AnchorLink"],{to:"#39-macros","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"39. Macros"),l.a.createElement("p",null,"Write code that writes code - meta programming"),l.a.createElement("p",null,"Match an expression and perform some operation"),l.a.createElement("p",null,"Code is expanded and compiled"),l.a.createElement(c["a"],{code:"macro_rules! my_macro {\n  (match) => ( code to run )\n}",lang:"rust"}),l.a.createElement(c["a"],{code:"my_macro!",lang:"rust"}),l.a.createElement(c["a"],{code:'println!("This is an {} macro", "awesome");',lang:"rust"}),l.a.createElement("p",null,"We can match multiple expressions"),l.a.createElement(c["a"],{code:"macro_rules! my_macro {\n  (match1) => ( code to run )\n  (match2) => ( code to run )\n}",lang:"rust"}),l.a.createElement("p",null,"Designators"),l.a.createElement("ul",null,l.a.createElement("li",null,"expr"),l.a.createElement("li",null,"ident"),l.a.createElement("li",null,"block"),l.a.createElement("li",null,"stmt"),l.a.createElement("li",null,"path"),l.a.createElement("li",null,"meta"),l.a.createElement("li",null,"ty"),l.a.createElement("li",null,"tt")),l.a.createElement("p",null,l.a.createElement("strong",null,"example")),l.a.createElement(c["a"],{code:'macro_rules! name {\n  ($name: expr) => { println!("Hey {}", $name) }\n}\n\nmacro_rules! name2 {\n  ($($name: expr), *) => ( $(println!("Hey {}", $name);)* );\n}\n\nmacro_rules! xy {\n  (x => $e: expr) => (println!("X is {}", $e));\n  (y => $e: expr) => (println!("Y is {}", $e));\n}\n\nmacro_rules! build_fn {\n  ($fn_name: ident) => {\n    fn $fn_name() {\n      println!("{:?} was called", stringify!($fn_name))\n    }\n  }\n}\n\nfn main() {\n\tname!("John");\n  name2!("Alex", "Mary", "Carol");\n  xy!(x => 5);\n  xy!(y => 3 * 9);\n  build_fn!(hey);\n  hey();\n}',lang:"rust"}),l.a.createElement("h2",{id:"40-trait-overview"},l.a.createElement(r["AnchorLink"],{to:"#40-trait-overview","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"40. Trait Overview"),l.a.createElement("ul",null,l.a.createElement("li",null,"Traits"),l.a.createElement("li",null,"Generics"),l.a.createElement("li",null,"dyn"),l.a.createElement("li",null,"Operator overloading"),l.a.createElement("li",null,"Static dispatch"),l.a.createElement("li",null,"Dynamic dispatch")),l.a.createElement("h2",{id:"41-traits"},l.a.createElement(r["AnchorLink"],{to:"#41-traits","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"41. Traits"),l.a.createElement("p",null,"Similar to an interface or abstract class"),l.a.createElement("p",null,"Add a definition to a structure"),l.a.createElement(c["a"],{code:"trait Name {\n  fn must_implement(&self) -> i32;\n  fn dn_action(&self) {...}\n  fn do_non_instance_action() {...}\n}",lang:"rust"}),l.a.createElement("p",null,"Can have definition only or default implementation"),l.a.createElement("p",null,"Can have instance and non-instance action"),l.a.createElement("p",null,l.a.createElement("strong",null,"implement a trait")),l.a.createElement(c["a"],{code:"impl Name for Person {\n  fn must_implement(&self) -> { 42 }\n  fn new(name: &str) -> Person {\n    Person(name: name)\n  }\n}",lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Can provide a constructor")),l.a.createElement(c["a"],{code:"trait Name {\n  fn new(name: &str) -> Self;\n}",lang:"rust"}),l.a.createElement(c["a"],{code:'let john = Person::new("John");',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"example")),l.a.createElement(c["a"],{code:'struct RustDev {\n    awesome: bool\n}\n\nstruct JavaDev {\n    awesome: bool\n}\n\ntrait Developer {\n    fn new(awesome: bool) -> Self;\n    fn language(&self) -> &str;\n    fn say_hello(&self) { println!("Hello world!") }\n}\n\nimpl Developer for RustDev {\n    fn new(awesome: bool) -> Self {\n        RustDev { awesome: awesome }\n    }\n\n    fn language(&self) -> &str {\n        "Rust"\n    }\n\n    fn say_hello(&self) {\n        println!("println!(\\"Hello world!\\");");\n    }\n}\n\nimpl Developer for JavaDev {\n    fn new(awesome: bool) -> Self {\n        JavaDev { awesome: awesome }\n    }\n\n    fn language(&self) -> &str {\n        "Java 1.8"\n    }\n\n    fn say_hello(&self) {\n        println!("System.out.println(\\"Hello world!\\");");\n    }\n}\n\nfn main() {\n  let r = RustDev::new(true);\n  let j = JavaDev::new(false);\n  println!("{}", r.language());\n  r.say_hello();\n}',lang:"rust"}),l.a.createElement("h2",{id:"42-generics"},l.a.createElement(r["AnchorLink"],{to:"#42-generics","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"42. Generics"),l.a.createElement("p",null,"Generics can be limited by traits"),l.a.createElement(c["a"],{code:"fn color<T: Colorable> (a: T) {\n  // ...\n}",lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Demo")),l.a.createElement(c["a"],{code:'trait Bark {\n  fn bark(&self) -> String;\n}\n\nstruct Dog {\n  species: &\'static str\n}\n\nstruct Cat {\n  color: &\'static str\n}\n\nimpl Bark for Dog {\n  fn bark(&self) -> String {\n    return format!("{} barking", self.species);\n  }\n}\n\nfn bark_it<T: Bark>(b: T) {\n  println!("{}", b.bark())\n}\n\nfn main() {\n  let dog = Dog { species: "retriever" };\n  let cat = Cat { color: "black" };\n  bark_it(dog);\n}',lang:"rust"}),l.a.createElement("h2",{id:"43-returning-traits"},l.a.createElement(r["AnchorLink"],{to:"#43-returning-traits","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"43. Returning traits"),l.a.createElement("p",null,"The compiler needs to know the space required for a function return type."),l.a.createElement("p",null,"A workaround is to return a box with a dyn trait."),l.a.createElement(c["a"],{code:"fn get_animal() -> Box<dyn Animal> {\n  ...\n}",lang:"rust"}),l.a.createElement("p",null,l.a.createElement("code",null,"dyn")," is a new addition to the language old code might not have it."),l.a.createElement("h2",{id:"44-adding-traits-to-existing-structures"},l.a.createElement(r["AnchorLink"],{to:"#44-adding-traits-to-existing-structures","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"44. Adding traits to existing structures"),l.a.createElement("p",null,"We can add a trait to a structure we didn't create"),l.a.createElement(c["a"],{code:"impl My_Trait for Vec<i32> {\n  ...\n}",lang:"rust"}),l.a.createElement(c["a"],{code:'#[allow(unused_variables)]\n#[allow(unused_assignments)]\n\ntrait Summable<T> {\n  fn sum(&self) -> T;\n}\n\nimpl Summable<i32> for Vec<i32> {\n  fn sum(&self) -> i32 {\n    let mut sum: i32 = 0;\n    for i in self {\n      sum += *i;\n    }\n    sum\n  }\n}\n\nfn main() {\n  let a = vec![1, 2, 3, 4, 5];\n  println!("sum = {}", a.sum())\n}',lang:"rust"}),l.a.createElement("h2",{id:"45-operator-overloading"},l.a.createElement(r["AnchorLink"],{to:"#45-operator-overloading","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"45. Operator overloading"),l.a.createElement("p",null,"We can implement standard operators for our custom structs"),l.a.createElement(c["a"],{code:"use std::ops::Add;",lang:"rust"}),l.a.createElement(c["a"],{code:"struct Custom {\n  // ...\n}",lang:"rust"}),l.a.createElement(c["a"],{code:"impl Add for Custom {\n  type Output = Custom;\n  fn add(self: Custom, other: Custom) -> Custom {\n    // ...\n  }\n}",lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Demo")),l.a.createElement(c["a"],{code:'use std::ops::Add;\n#[allow(unused_variables)]\n#[allow(unused_assignments)]\n\n#[derive(Debug)]\nstruct Point {\n  x: f64,\n  y: f64\n}\n\nimpl Add for Point {\n  type Output = Point;\n\n  fn add(self, other:Self) -> Self::Output {\n    Point {\n      x: self.x + other.x,\n      y: self.y + other.y\n    }\n  }\n}\n\nfn main() { \n  let p1 = Point { x: 1.3, y: 4.6 };\n  let p2 = Point { x: 3.7, y: 1.4 };\n  let p3 = p1 + p2;\n  println!("{:?}", p3)\n}',lang:"rust"}),l.a.createElement("h2",{id:"46-static-dispatch"},l.a.createElement(r["AnchorLink"],{to:"#46-static-dispatch","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"46. Static dispatch"),l.a.createElement("p",null,"A generic trait will be converted to the required type at compile time"),l.a.createElement("p",null,l.a.createElement("strong",null,"Monomorphization")),l.a.createElement("ul",null,l.a.createElement("li",null,"converting to one form")),l.a.createElement("p",null,l.a.createElement("strong",null,"Demo")),l.a.createElement(c["a"],{code:'#[allow(unused_variables)]\n#[allow(unused_assignments)]\n\ntrait Duplicateable {\n  fn dupl(&self) -> String;\n}\n\nimpl Duplicateable for String {\n  fn dupl(&self) -> String {\n    format!("{0}{0}", *self)\n  }\n}\n\nimpl Duplicateable for i32 {\n  fn dupl(&self) -> String {\n    format!("{}", *self * 2)\n  }\n}\n\nfn duplicate<T: Duplicateable> (x: T) {\n  println!("{}", x.dupl());\n}\n\nfn main() {\n  let a = 42;\n  let b = "Hi John ".to_string();\n  duplicate(a);\n  duplicate(b);\n}',lang:"rust"}),l.a.createElement("h2",{id:"47-dynamic-dispatch"},l.a.createElement(r["AnchorLink"],{to:"#47-dynamic-dispatch","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"47. Dynamic dispatch"),l.a.createElement("p",null,"A generic trait will be converted to the required type at run time"),l.a.createElement("p",null,l.a.createElement("strong",null,"Demo")),l.a.createElement(c["a"],{code:'#[allow(unused_variables)]\n#[allow(unused_assignments)]\n\ntrait Duplicateable {\n  fn dupl(&self) -> String;\n}\n\nimpl Duplicateable for String {\n  fn dupl(&self) -> String {\n    format!("{0}{0}", *self)\n  }\n}\n\nimpl Duplicateable for i32 {\n  fn dupl(&self) -> String {\n    format!("{}", *self * 2)\n  }\n}\n\nfn duplicate(x: &dyn Duplicateable) {\n  println!("{}", x.dupl())\n}\n\nfn main() {\n  let a = 42;\n  let b = "Hi John ".to_string();\n  duplicate(&a);\n  duplicate(&b);\n}',lang:"rust"}),l.a.createElement("h2",{id:"48-memory-management-overview"},l.a.createElement(r["AnchorLink"],{to:"#48-memory-management-overview","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"48. Memory management Overview"),l.a.createElement("ul",null,l.a.createElement("li",null,"Ownership"),l.a.createElement("li",null,"Borrowing"),l.a.createElement("li",null,"Lifttimes"),l.a.createElement("li",null,"Reference counted variables")),l.a.createElement("h2",{id:"49-ownership"},l.a.createElement(r["AnchorLink"],{to:"#49-ownership","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"49. Ownership"),l.a.createElement("p",null,"Only one variable can own a piece of memory"),l.a.createElement("p",null,"For primitive types, copying data is cheap"),l.a.createElement("p",null,"For complex types, ownership is transferred."),l.a.createElement("p",null,l.a.createElement("strong",null,"Demo")),l.a.createElement(c["a"],{code:'#[allow(unused_variables)]\n#[allow(unused_assignments)]\n\nfn main() {\n  let i = 5;\n  let j = i;\n  println!("{}", j);\n  println!("{}", i);\n\n  let v = vec![1, 2, 3, 4, 5];\n  // let w = v;\n  // println!("{:?}", w);\n  // println!("{:?}", v);\n\n  let foo = |v: Vec<i32>| -> Vec<i32> {\n    println!("Vector used in foo");\n    v\n  };\n  let v = foo(v);\n  println!("{:?}", v);\n}',lang:"rust"}),l.a.createElement("h2",{id:"50-borrowing"},l.a.createElement(r["AnchorLink"],{to:"#50-borrowing","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"50. Borrowing"),l.a.createElement("p",null,"Only one variable can own a piece of memory"),l.a.createElement("p",null,"Variables can borrow ownership to other pieces of memory"),l.a.createElement(c["a"],{code:"let a = 6;\nlet b = &a;",lang:"rust"}),l.a.createElement(c["a"],{code:'println("{}", *b);',lang:"rust"}),l.a.createElement("p",null,l.a.createElement("strong",null,"Demo")),l.a.createElement(c["a"],{code:'#[allow(unused_variables)]\n#[allow(unused_assignments)]\n\nfn main() {\n  let mut a = 6;\n\n  {\n    let b = &mut a;\n    println!("{}", *b);\n    *b += 2;\n  }\n\n  println!("{}", a);\n\n  let mut v = vec![1, 2, 3, 4, 5];\n  for i in &v {\n    println!("{}", i);\n    v.push(6);\n  }\n}',lang:"rust"}),l.a.createElement("h2",{id:"51-lifetime"},l.a.createElement(r["AnchorLink"],{to:"#51-lifetime","aria-hidden":"true",tabIndex:-1},l.a.createElement("span",{className:"icon icon-link"})),"51. Lifetime"),l.a.createElement("p",null,"An indication of how long an object will live"),l.a.createElement("p",null,"Rust prevents parts to objects outliving the object"),l.a.createElement(c["a"],{code:"struct Object<'lifetime> {\n  field: &'lifetime str\n}",lang:"rust"}),l.a.createElement("p",null,"Lifetime elision - compiler builds lifetimes for us when evident."),l.a.createElement("p",null,l.a.createElement("strong",null,"Demo")),l.a.createElement(c["a"],{code:'#[allow(unused_variables)]\n#[allow(unused_assignments)]\n\n#[derive(Debug)]\nstruct Person {\n  name: String\n}\n\n#[derive(Debug)]\nstruct Dog<\'l> {\n  name: String,\n  owner: &\'l Person\n}\n\nimpl Person {\n  fn get_name(&self) -> &String {\n    &self.name\n  }\n}\n\nfn main() {\n  println!("{}", get_str());\n\n  let p1 = Person { name: String::from("John") };\n  let d1 = Dog { name: String::from("Max"), owner: &p1 };\n\n  println!("{:?}", d1);\n\n  let mut a: &String;\n  {\n    let p2 = Person { name: String::from("Mary") };\n    a = p2.get_name();\n  }\n  println!("{}", a);\n}\n\nfn get_str() -> &\'static str {\n  "Hello"\n}',lang:"rust"})))}));n["default"]=e=>{var n=l.a.useContext(r["context"]),t=n.demos;return l.a.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r["AnchorLink"].scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.a.createElement(m,{demos:t})}},WpQk:function(e,n,t){},"dMo/":function(e,n,t){"use strict";var a=t("q1tI"),l=t.n(a),r=t("hKI/"),c=t.n(r);t("WpQk");function i(e,n){return d(e)||u(e,n)||o(e,n)||m()}function m(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function o(e,n){if(e){if("string"===typeof e)return s(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?s(e,n):void 0}}function s(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,a=new Array(n);t<n;t++)a[t]=e[t];return a}function u(e,n){var t=null==e?null:"undefined"!==typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var a,l,r=[],c=!0,i=!1;try{for(t=t.call(e);!(c=(a=t.next()).done);c=!0)if(r.push(a.value),n&&r.length===n)break}catch(m){i=!0,l=m}finally{try{c||null==t["return"]||t["return"]()}finally{if(i)throw l}}return r}}function d(e){if(Array.isArray(e))return e}var E=function(e){var n=e.children,t=Object(a["useRef"])(),r=Object(a["useState"])(!1),m=i(r,2),o=m[0],s=m[1],u=Object(a["useState"])(!1),d=i(u,2),E=d[0],p=d[1];return Object(a["useEffect"])((function(){var e=t.current,n=c()((function(){s(e.scrollLeft>0),p(e.scrollLeft<e.scrollWidth-e.offsetWidth)}),100);return n(),e.addEventListener("scroll",n),window.addEventListener("resize",n),function(){e.removeEventListener("scroll",n),window.removeEventListener("resize",n)}}),[]),l.a.createElement("div",{className:"__dumi-default-table"},l.a.createElement("div",{className:"__dumi-default-table-content",ref:t,"data-left-folded":o||void 0,"data-right-folded":E||void 0},l.a.createElement("table",null,n)))};n["a"]=E}}]);